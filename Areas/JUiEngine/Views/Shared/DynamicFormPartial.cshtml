@using System.Collections.Specialized
@using System.Globalization
@using WebAppIDEEngine.Models.Core
@using ViewModel.ActionTypes
@using Engine.Attributes
@using System.Web.Mvc
@using ViewModel.ActionTypes
@using Domain.Attributes
@using System.Web.Mvc.Html;

@using Engine.Areas.App.Controllers
@using Engine.Areas.JUiEngine.Controllers
@using Engine.Controllers.AbstractControllers
@using Engine.Service.AbstractControllers
@using Engine.DomainLayer.Models.Core.ViewGeneration
@using Engine.Entities.Models.Core.AppGeneration
@using Engine.Entities.Models.UiGeneratorModels
@using WebAppIDEEngine.Models.CoreEnum
@using WebAppIDEEngine.Models.UiGeneratorModels
@using InputType = WebAppIDEEngine.Models.CoreEnum.InputType
@model dynamic


<link rel="stylesheet" href="~/Content/multiselect/dist/css/bootstrap-multiselect.css" type="text/css"/>


@{
    var uiFormInputs = (List<UiFormInput>) ViewData[UiFormEngineController.DynamicFormUiFormInputs];
    var formGroupClass = ViewData["form-group"] as string ?? "col";

    Layout = null;
    // var modelNameValue = ViewData[UiFormEngineController.ModelNameValue] as NameValueCollection;
    var model = ViewData[UiFormEngineController.Model] as dynamic;


    Dictionary<string, object> modelNameValue = new Dictionary<string, object>();

    if (model != null)
    {
      var propx=  (model as object).GetType().GetProperties().Where(p =>
            p.PropertyType == typeof(int) || p.PropertyType == typeof(int?) ||
            p.PropertyType == typeof(long) ||
            p.PropertyType == typeof(long?) ||
            p.PropertyType == typeof(float) ||
            p.PropertyType == typeof(float?) ||
            p.PropertyType == typeof(double) ||
            p.PropertyType == typeof(double?) ||
            p.PropertyType == typeof(bool) ||
            p.PropertyType == typeof(bool?) ||
            p.PropertyType == typeof(string)

            );
        foreach (var pi in propx)
        {
            var val = pi.GetValue(model, null);

            if (val is Enum)
            {
                modelNameValue.Add(pi.Name, ((int) val).ToString());
            }
            else
            {
                modelNameValue.Add(pi.Name, val);
            }
        }

        ViewData[UiFormEngineController.ModelNameValue] = modelNameValue;
        ViewData[UiFormEngineController.Model] = Model;

        ViewData[UiFormEngineController.NoLayoutForShowView] = true;
    }


    var pc = new PersianCalendar();

    List<string> inputAjaxFuncNames = new List<string>();
}
<style>
    .form-group { float: right; }
</style>

@if (uiFormInputs != null)
{
    @Html.Hidden("BackUrl", Request?.Url?.AbsoluteUri)
    if (modelNameValue.ContainsKey("Id"))
    {
        @Html.Hidden("Id", modelNameValue["Id"])
    }
    foreach (var uiFormInput in uiFormInputs)
    {
        uiFormInput.Name = uiFormInput.Translate ?? uiFormInput.UiInput.Translate ?? uiFormInput.Name ?? uiFormInput.UiInput.Name;
        uiFormInput.Description = uiFormInput.Description ?? uiFormInput.UiInput.Description;

        string onchange = "";
        string onChangeUpdate = "";


        if (!string.IsNullOrEmpty(uiFormInput.OnChangeUpdate))
        {
            onChangeUpdate = $@"UpdateOnChange('{uiFormInput.OnChangeUpdate}')";
            onchange += onChangeUpdate + ";";
        }

        if (!string.IsNullOrEmpty(uiFormInput.ChangeScript))
        {
            onchange += uiFormInput.ChangeScript + ";";
        }
        
        


        string val = null;
        if (modelNameValue.ContainsKey(uiFormInput.UiInput.Name) && modelNameValue[uiFormInput.UiInput.Name] != null)
        {
            val = modelNameValue[uiFormInput.UiInput.Name].ToString();
        }
        <div class="form-group @formGroupClass @uiFormInput.Css">
            @if (uiFormInput.UiInput.InputType != InputType.Checkbox)
            {
                <label>@uiFormInput.Name</label>
            }
            @{

                string scripts = "";
                if (uiFormInput.UiInput.FieldType == FieldType.Text)
                {
                    string type = null;
                    string max = "";
                    string min = "";
                    string regex = "";
                    string size = "";
                    max = uiFormInput.UiInput.Max.HasValue ? $@"max=""{uiFormInput.UiInput.Max.ToString()}""" : "";
                    min = uiFormInput.UiInput.Min.HasValue ? $@"min=""{uiFormInput.UiInput.Min.ToString()}""" : "";
                    regex = !string.IsNullOrEmpty(uiFormInput.UiInput.Regex) ? $@"regex="" {uiFormInput.UiInput.Regex} """ : "";
                    size = uiFormInput.UiInput.Size.HasValue ? $@"size="" {uiFormInput.UiInput.Size.ToString()}""" : "";
                    var styleClass = "form-control";
                    
                    if (uiFormInput.UiInput.InputType == InputType.Text)
                    {
                        type = @"""text""";
                        <input  onchange="@onchange" value="@val" @max @min @regex @size id="@uiFormInput.UiInput.Name" class="@styleClass" placeholder="@uiFormInput.UiInput.PlaceHolder" type="@type" name="@uiFormInput.UiInput.Name"/>
    // @Html.TextBox(uiFormInput.UiInput.Name,modelNameValue[uiFormInput.UiInput.Name]  ,new {@id=uiFormInput.UiInput.Name, @onchange="@onchange" })
                    }
                    if (uiFormInput.UiInput.InputType == InputType.Number)
                    {
                        type = @"""number""";
                        <input onchange="@onchange" value="@val" @max @min @regex @size id="@uiFormInput.UiInput.Name" class="@styleClass" placeholder="@uiFormInput.UiInput.PlaceHolder" type="@type" name="@uiFormInput.UiInput.Name"/>
                     //   @Html.TextBox(uiFormInput.UiInput.Name,modelNameValue[uiFormInput.UiInput.Name]  ,new {@id=uiFormInput.UiInput.Name, @onchange="@onchange" ,@type="number" })
                    }    

                    if (uiFormInput.UiInput.InputType == InputType.Checkbox)
                    {
                        type = @"checkbox";
                        styleClass = "";
                        bool d = (modelNameValue[uiFormInput.UiInput.Name] as bool?).HasValue ? (modelNameValue[uiFormInput.UiInput.Name] as bool?).Value : false;
                      
                        <label class="hover-cursor">@uiFormInput.Name
                        @Html.CheckBox(uiFormInput.UiInput.Name,d,new {@id=uiFormInput.UiInput.Name, @onchange="@onchange" })
            </label>
                    }


                    //<input onchange="@onchange" value="@val" @max @min @regex @size id="@uiFormInput.UiInput.Name" class="@styleClass" placeholder="@uiFormInput.Name" type="@type" name="@uiFormInput.UiInput.Name"/>
                }
                if (uiFormInput.UiInput.FieldType == FieldType.DropDown)
                {
                    <select onchange="@onchange" value="@val" id="@uiFormInput.UiInput.Name" class="form-control" placeholder="@uiFormInput.Name" name="@uiFormInput.UiInput.Name">

                        @if (uiFormInput.SelectList != null)
                        {
                            <option>انتخاب کنید</option>

                            foreach (SelectListItem selectListItem in uiFormInput.SelectList.Items)
                            {
                                string isSelected = selectListItem.Value == val ? "selected='selected'" : "";

                                <option @isSelected value="@selectListItem.Value">@selectListItem.Text</option>
                            }
                        }
                        else
                        {
                            <option></option>
                        }
                    </select>
                }
                if (uiFormInput.UiInput.FieldType == FieldType.MultiSelect)
                {
                 //   uiFormInput.UiInput.Name += "[]";
                    <select 
                            id="@uiFormInput.UiInput.Name"
                            class="mymultiselect form-control"
                            placeholder="@uiFormInput.Name"
                            name="@uiFormInput.UiInput.Name"
                            multiple="multiple">

                        @if (uiFormInput.SelectList != null)
                        {
                            <option>انتخاب کنید</option>

                            foreach (SelectListItem selectListItem in uiFormInput.SelectList.Items)
                            {
                                string isSelected = selectListItem.Value == val ? "selected='selected'" : "";

                                <option @isSelected value="@selectListItem.Value">@selectListItem.Text</option>
                            }
                        }
                        else
                        {
                            <option></option>
                        }
                    </select>
                }
                if (uiFormInput.UiInput.FieldType == FieldType.Date)
                {
                    if (modelNameValue.ContainsKey(uiFormInput.UiInput.Name) && modelNameValue[uiFormInput.UiInput.Name] != null)
                    {
                        if (modelNameValue[uiFormInput.UiInput.Name] is DateTime?)
                        {
                            var value = (modelNameValue[uiFormInput.UiInput.Name] as DateTime?).Value;
                            val = Engine.Controllers.AbstractControllers.EngineUtility.GaregorianToDateOnlyFormat(value);
                        }
                        else if (modelNameValue[uiFormInput.UiInput.Name] is DateTime)
                        {
                            var value = (DateTime) modelNameValue[uiFormInput.UiInput.Name];
                            val = Engine.Controllers.AbstractControllers.EngineUtility.GaregorianToDateOnlyFormat(value);
                        }
                        else
                        {
                            throw new Exception("دیتایی بغیر از تاریخ برای مدل پاس شده است");
                        }
                    }

                    <input type="hidden" value="@val" name="@uiFormInput.UiInput.Name"
                           class="form-control" hidden="hidden" id="@uiFormInput.UiInput.Name">
                    <input type="text" onchange="dateToChanged(this, 'fa_@uiFormInput.UiInput.Name', '@uiFormInput.UiInput.Name')" value="@val" name="fa_@uiFormInput.UiInput.Name" class="form-control"
                           id="fa_@uiFormInput.UiInput.Name">
                }

                if (uiFormInput.UiInput.FieldType == FieldType.Time)
                {
                    if (modelNameValue.ContainsKey(uiFormInput.UiInput.Name) && modelNameValue[uiFormInput.UiInput.Name] != null)
                    {
                        if (modelNameValue[uiFormInput.UiInput.Name] is DateTime?)
                        {
                            var value = (modelNameValue[uiFormInput.UiInput.Name] as DateTime?).Value;
                            val = EngineUtility.ConvertTimeSpanToStr(value.TimeOfDay);
                        }
                        else if (modelNameValue[uiFormInput.UiInput.Name] is DateTime)
                        {
                            var value = (DateTime) modelNameValue[uiFormInput.UiInput.Name];
                            val = EngineUtility.ConvertTimeSpanToStr(value.TimeOfDay);
                        }
                        else
                        {
                            throw new Exception("دیتایی بغیر از تاریخ برای مدل پاس شده است");
                        }
                    }

                    <div class="input-group clockpicker">
                        <input type="text" class="form-control"
                               name="@uiFormInput.UiInput.Name"
                               class="form-control" id="@uiFormInput.UiInput.Name"
                               value="@val">
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-time"></span>
                        </span>
                    </div>
                }

                if (uiFormInput.UiInput.FieldType == FieldType.TextArea)
                {
                    <textarea onchange="@onchange" value="@val" id="@uiFormInput.UiInput.Name" class="form-control" placeholder="@uiFormInput.Name" rows="5" cols="10" name="@uiFormInput.UiInput.Name">  </textarea>
                }
            }

            <small id="help_@uiFormInput.Id" class="form-text text-muted">@uiFormInput.Description</small>
        </div>

        var inputMethod = uiFormInput.UiInput.UiInputMethods.FirstOrDefault();
        if (inputMethod != null)
        {
            string subSystemName;
            if (string.IsNullOrEmpty(inputMethod.SubSystemName))
            {
                subSystemName = inputMethod.DefineControllerMethod.DefineController.SubSystem.Name;
            }
            else
            {
                subSystemName = inputMethod.SubSystemName;
            }

            string controllerName;
            if (string.IsNullOrEmpty(inputMethod.ControllerName))
            {
                controllerName = inputMethod.DefineControllerMethod.DefineController.Name;
            }
            else
            {
                controllerName = inputMethod.ControllerName;
            }

            string methodName;
            if (string.IsNullOrEmpty(inputMethod.MethodName))
            {
                methodName = inputMethod.DefineControllerMethod.Name;
            }
            else
            {
                methodName = inputMethod.MethodName;
            }


            var ajaxFunctionName = uiFormInput.UiInput.Name + "_Ajax";

            inputAjaxFuncNames.Add(ajaxFunctionName);

            controllerName = controllerName.Replace("ApiController", "");
            controllerName = controllerName.Replace("Controller", "");

            var url = $@"/{subSystemName}/{controllerName}/{methodName}{Request.Url.Query}";

            <script>

                var @ajaxFunctionName = function(params) {
                    if (!params) {
                        params = "";
                    }

                    $.ajax({
                        url: "@url" + params,
                        success: function(result) {
                            @if (inputMethod.DefineControllerMethod.MethodType == MethodType.GetDropDown)
                            {
                                <text>
                                    parseDropDownAndSetValue(result,
                                        '#@Html.Raw(inputMethod.UiInput.Name)',
                                        '@val');
                                </text>
                            }
                        }
                    });
                }


            </script>
        }
    }
}




<script>
    function parseDropDownAndSetValue(result, id, value) {
        console.log(result);

        var optionStr = "";
        optionStr = "<option >انتخاب کنید</option>";
        var selected = "";
        for (var i = 0; i < result.length; i++) {
            selected = "";
            if (value && value === result[i].Id) {
                selected = 'selected="selected"';
            }

            optionStr += "<option value='" + result[i].Id + "' " + selected + ">" + result[i].Value + "</option>";
        }

        $(id).html(optionStr);
    }


    function UpdateOnChange(toUpdateElements) {
        if (!toUpdateElements) {
            return;
        }

        var hasQuestionSign = false;

        @if (!string.IsNullOrEmpty(Request.Url.Query))
        {
            <text>
                hasQuestionSign = true;
            </text>
        }
        
        
        var arr = toUpdateElements.split(',');
        var url;
        for (var i = 0; i < arr.length; i++) {

            @{
                var fermi = ViewData[UiFormEngineController.FormId] as string;

                <text>
                    if (hasQuestionSign) {
                        url = '?' + $('#@fermi').serialize();
                    } else {
                        url = '&' + $('#@fermi').serialize();
                    }
                </text>
            }
            
           
            var funcTion = arr[i] + "_Ajax" + "('" + url + "');";

            eval(funcTion);
        }

    }
    @{
        foreach (var funcName in inputAjaxFuncNames)
        {
            @Html.Raw($@"{funcName}();")
        }
    }
    
    
    function dateToChanged(el, from, to) {
        fromTo('#' + from, "#" + to);
    }

    function fromTo(one, two) {
        debugger;
        var tmpDate = $(one).MdPersianDateTimePicker('getDate');
        var parsedDate = Date.parse(tmpDate);

        console.log('parsedDate', parsedDate);
        var date = new Date(parsedDate);

        console.log('date', date);
        //  var garegorianDate = toGregorian(date.getFullYear(),date.getMonth(),date.getDate());

        console.log('garegorianDate', date.toJSON());

        $(two).val(date.toJSON());
    }


    $(document).ready(function() {

       // $('#mymultiselect').multiselect();


        $('.clockpicker').clockpicker({
            donetext: 'انتخاب'
        });

        
        @{
            var dates = uiFormInputs.Where(fi => fi.UiInput.FieldType == FieldType.Date);

            foreach (var date in dates)
            {
                var todate = date.IsToDate ? "true" : "false";
                var fromDate = date.IsFromDate ? "true" : "false";

                if (string.IsNullOrEmpty(date.DateGroupId))
                {
                    <text>
                        $('#fa_@date.UiInput.Name').MdPersianDateTimePicker({
                            Placement: 'left',
                            Trigger: 'click',
                            EnableTimePicker: false,
                            TargetSelector: '#fa_@date.UiInput.Name',
                            ToDate: @todate,
                            FromDate: @fromDate,
                            DisableBeforeToday: false,
                            Disabled: false,
                            Format: 'yyyy/MM/dd',
                            IsGregorian: false,
                            EnglishNumber: false,
                            InLine: false,
                            GroupId: "@date.DateGroupId"
                        });

                    </text>
                }
                else
                {
                    <text>
        
                        $('#fa_@date.UiInput.Name').MdPersianDateTimePicker({
                            Placement: 'left',
                            Trigger: 'click',
                            EnableTimePicker: false,
                            TargetSelector: '#fa_@date.UiInput.Name',
                            ToDate: @todate,
                            FromDate: @fromDate,
                            DisableBeforeToday: false,
                            Disabled: false,
                            Format: 'yyyy/MM/dd',
                            IsGregorian: false,
                            EnglishNumber: false,
                            InLine: false
                        });

                    </text>
                }
            }
        }
        
        
       
    });


</script>