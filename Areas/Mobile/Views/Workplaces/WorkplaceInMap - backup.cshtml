@using Engine.Areas.Mobile.Models
@using Newtonsoft.Json
@model long

@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout_Admin.cshtml";
}
<script src='/Content/mapbox/mapbox.js'></script>
<link href='/Content/mapbox/mapbox.css' rel='stylesheet'/>


<link href='/Content/mapbox/draw.css' rel='stylesheet'/>
<script src='/Content/mapbox/turf.js'></script>
<script src='/Content/mapbox/draw.js'></script>
<style>
    body {
        margin: 0;
        padding: 0;
    }

    #map {
        position: absolute;
        top: 250px;
        bottom: 10px;
        left: 20%;
        width: 60%;
        right: 20%;
        z-index: 1;
    }
</style>


<style>
    .calculation-box {
        height: 75px;
        width: 150px;
        position: absolute;
        bottom: 40px;
        left: 10px;
        background-color: rgba(255, 255, 255, .9);
        padding: 15px;
        text-align: center;
    }

    p {
        font-family: 'Open Sans';
        margin: 0;
        font-size: 13px;
    }
</style>


<div class="container">
    <div class="row">

        <div class="col-md-4"></div>
        <div class="col-md-4">
            <div class="form">
                <div class="form-group">
                    <label for="email">کد محل کار</label>
                    <input readonly="readonly" name="id" id="id" value="@ViewData["id"]" type="text" class="form-control" id="email">
                </div>
                <div class="form-group">
                    <label for="pwd">نام محل کار:</label>
                    <input name="name" id="name" value="@ViewData["name"]" type="text" class="form-control" id="pwd">
                </div>

                <input type="submit" onclick="mysubmit()"/>
            </div>

        </div>
        <div class="col-md-4"></div>


    </div>
    <div class="row">

        <div id='map'></div>
        <div class='calculation-box'>
            <p>با استفاده از ابزار نقشه حوزه کاری محل کار را مشخص نمایید.</p>
            <div id='calculated-area'></div>
        </div>
    </div>
</div>


<script>
    var options = {
        enableHighAccuracy: true,
        timeout: 60000,
        maximumAge: 0
    };

    function success(longitude, latitude) {


        map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/mapbox/satellite-v9', //hosted style id
            center: [longitude, latitude], // starting position
            zoom: 12 // starting zoom
        });

        draw = new MapboxDraw({
            displayControlsDefault: false,
            controls: {
                polygon: true,
                trash: true
            }
        });
        map.addControl(draw);

        map.on('draw.create', updateArea);
        map.on('draw.delete', updateArea);
        map.on('draw.update', updateArea);

        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));
    }

    var draw;
    var map;

    function showDefault() {
        console.warn("default");


        map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/mapbox/satellite-v9', //hosted style id
            center: [46.2738, 38.0962], // starting position
            zoom: 12 // starting zoom
        });

        draw = new MapboxDraw({
            displayControlsDefault: false,
            controls: {
                polygon: true,
                trash: true
            }
        });
        
        map.addControl(draw);

        map.on('draw.create', updateArea);
        map.on('draw.delete', updateArea);
        map.on('draw.update', updateArea);

        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));
        
        
        if (existData && existData.data && existData.data.features && existData.data.features.length > 0) {
            debugger;
            data = existData.data;
            area = existData.area;
            updateAreaHelp(data);
            draw.add(data);

        } 
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            showDefault();

        }
    }

    function showPosition(position) {


        console.warn("success position.coords.longitude", position.coords.longitude);
        console.warn("success position.coords.latitude", position.coords.latitude);
        success(position.coords.longitude, position.coords.latitude);
        
        
        if (existData && existData.data && existData.data.features && existData.data.features.length > 0) {
            debugger;
            data = existData.data;
            area = existData.area;
            updateAreaHelp(data);
            draw.add(data);
        } 
    }

    mapboxgl.accessToken =
        'pk.eyJ1IjoibW9oYW1tYWRqYWZhcml5YW43IiwiYSI6ImNqcXRqenkyczBha2k0M281NjQ0amVlNWwifQ.xD69Nt5VabUT8dwmlTOdWQ';
/* eslint-disable */


    var data;
    var area;

    function updateArea(e) {
        debugger;
        data = draw.getAll();
        updateAreaHelp(data);
    }

    function updateAreaHelp(data) {
        var answer = document.getElementById('calculated-area');
        if (data.features.length > 0) {
            area = turf.area(data);
// restrict to area to 2 decimal points
            var rounded_area = Math.round(area * 100) / 100;
            answer.innerHTML = '<p><strong>' + rounded_area + '</strong></p><p>square meters</p>';
        } else {
            answer.innerHTML = '';
            alert("Use the draw tools to انتخاب روی نقشه!");
        }
    }



    function mysubmit() {

        var id = $("#id").val();
        var name = $("#name").val();

        console.log(data, data);
        console.log(area, area);

        debugger;
        $.ajax({
            type: "POST",
            //url: '',
            data: { WorkplaceId: id, data: data, area: area ,Name:name},
            success: function(e) {
                console.info(e);
            },
            dataType: 'json',
            fail: function(e) {
                console.error(e);
            }
        });


    }

    var existData;
    @{

        var gps = ViewData["gps"] as string;

        if (gps != null)
        {
            
            <text>
            existData = JSON.parse('@Html.Raw(gps)');
            </text>
        }
    }
    
    
  
    getLocation();


</script>