@using Engine.Areas.Mobile.Models
@using Newtonsoft.Json
@model long

@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout_Admin.cshtml";
}

<link rel="stylesheet" href="/Content/leaflet/leaflet.css"/>
<link rel="stylesheet" href="/Content/leaflet/leafletdraw.css"/>
<script src="/Content/leaflet/leaflet.js"></script>
<script src="/Content/leaflet/leafletdraw.js"></script>

<script src="~/Content/leaflet/leaflet-pollyfills.js"></script>
<script src="~/Content/leaflet/leaflet-bing-layer.js"></script>
<style>
    #mapid { height: 500px; }
    
    #mapid a {
    
    background-color: white;
    }

</style>

<div class="container">
    <div class="row">

        <div class="col-md-4"></div>
        <div class="col-md-4">
            <div class="form">
                <div class="form-group">
                    @*<label for="email">کد محل کار</label>*@
                    <input readonly="readonly" name="id" id="id" value="@ViewData["id"]" type="hidden" class="form-control" id="email">
                </div>
                <div class="form-group">
                    <label for="pwd">نام محل کار:</label>
                    <input name="name" id="name" value="@ViewData["name"]" type="text" class="form-control" id="pwd">
                </div>

                <br/>

                <input name="token" value="@ViewData["token"]" type="hidden" style="display:none" />

                <button type="submit" class="btn btn-primary"  onclick="mysubmit()"> ثبت</button>
                <button type="submit" class="btn btn-primary"  onclick="resetMap()"> ریست</button>
                <hr/>
                </div>

        </div>
        <div class="col-md-4"></div>


    </div>
    <div class="row">
        
        <div class="row">
            <div class="col-md-4"></div>
            <div class="col-md-4">
                <button type="button" class="btn btn-primary"  onclick="findMe()">من را در نقشه پیدا کن</button>
                <button type="button" class="btn btn-primary"  onclick="goToDefinedLocation()">نمایش مکان تعریف شده بعدی</button>
            </div>
            <div class="col-md-4"></div>

        </div>

        <div id="mapid"></div>

        <div class='calculation-box'>
            <p>با استفاده از ابزار نقشه حوزه کاری محل کار را مشخص نمایید.</p>
            <div id='calculated-area'></div>
        </div>
    </div>
</div>


<script>
function zoomToShape(shape) {
    if (shape instanceof L.Circle) {
        mymap.fitBounds(shape.getBounds());
    } else if (shape instanceof L.Polygon) {
        mymap.fitBounds(shape.getBounds());
    } else {
        // Handle other types of shapes as needed
    }
}
let displayDefinedLocationCounter=0;
function goToDefinedLocation() {
// Function to zoom to a specific shape

let length = drawnItems.getLayers().length;

if (length>0){
    
    if (displayDefinedLocationCounter>=length){
        displayDefinedLocationCounter=0;
        }
    // Example: Zoom to the first shape in drawnItems
    var firstShape = drawnItems.getLayers()[displayDefinedLocationCounter];
    if (firstShape) {
        zoomToShape(firstShape);
    }
    
    displayDefinedLocationCounter++;
   }
}


function resetMap(){
    mymap.off();
    mymap.remove();
    
    showDefault();
    
    }
    var mymap;
    var options = {
        enableHighAccuracy: true,
        timeout: 60000,
        maximumAge: 0
    };


    var draw;
    var map;

    function showDefault() {
        console.warn("default");
        mymap = L.map('mapid').setView([37.9642, 46.0517], 13);

        init();
    }

    var mylayer;
var drawnItems;
    function init() {
        //L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}',
        //    {
        //        attribution:
        //        'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        //        maxZoom: 18,
        //        id: 'mapbox.streets',
        //        accessToken:
        //        'pk.eyJ1IjoibW9oYW1tYWRqYWZhcml5YW43IiwiYSI6ImNqcXRqenkyczBha2k0M281NjQ0amVlNWwifQ.xD69Nt5VabUT8dwmlTOdWQ'
        //    }).addTo(mymap);


        var BING_KEY = 'AqayHMtdnKlKdnR4LlQp3Ey0lXYaWV0PEsUMBZgepa7U4iP4YikGp955N-btWCI5';


        var bingLayer = L.tileLayer.bing(BING_KEY).addTo(mymap);

        // FeatureGroup is to store editable layers
         drawnItems = new L.FeatureGroup();
        mymap.addLayer(drawnItems);



        mymap.on(L.Draw.Event.CREATED, function (e) {
            var type = e.layerType,
                layer = e.layer;

            if (type === 'marker') {
                layer.bindPopup('A popup!');
            }



            drawnItems.addLayer(layer);
        });

      /*  if (existData) {

          /!*  var c = 0;
                existData.data.forEach(function(e) {
                    c++;
                    var pol=L.polygon([]);
                    pol.setLatLngs(e);
                    drawnItems.addLayer(pol);

                    if (c >= 1) {
                        mymap.setView([e[0][0].lat, e[0][0].lng], 19);
                    }



                });*!/

        }*/
        
      // Check if there's previously saved data in localStorage
     // var savedData = localStorage.getItem('drawnItemsData');
      
      // If there's saved data, add it to the map
      if (existData) {
          var parsedData = JSON.parse(existData);
          L.geoJSON(parsedData, {
              onEachFeature: function (feature, layer) {
                  // Ensure circles are loaded as circles
                  
                  
                  console.log(feature.geometry.type,feature.properties.radius)
                  if (feature.geometry.type === 'Point' && feature.properties.radius) {
                      L.circle(layer.getLatLng(), { radius: feature.properties.radius }).addTo(drawnItems);
                  } else {
                      drawnItems.addLayer(layer);
                  }
              }
          });
      }

        
        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            },
            draw: {
                polygon: {
                    allowIntersection: false, // Restricts shapes to simple polygons
                    drawError: {
                        color: '#e1e100', // Color the shape will turn when intersects
                        message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                    },
                    shapeOptions: {
                        color: '#bada55'
                    }
                },
                polyline: false,
                circle: true, // Turns off this drawing tool
                rectangle: true,
                marker: false
            }

        });
        mymap.addControl(drawControl);
        
        L.FeatureGroup.include({
            toGeoJSON: function () {
                var geojson = {
                    type: 'FeatureCollection',
                    features: []
                };
        
                this.eachLayer(function (layer) {
                    var feature;
        
                    if (layer instanceof L.Circle) {
                        feature = {
                            type: 'Feature',
                            properties: {
                                radius: layer.getRadius()
                            },
                            geometry: {
                                type: 'Point',
                                coordinates: [layer.getLatLng().lng, layer.getLatLng().lat]
                            }
                        };
                    } else {
                        feature = layer.toGeoJSON();
                    }
        
                    geojson.features.push(feature);
                });
        
                return geojson;
            }
        });
        
        
        mymap.on('draw:created draw:edited', function (e) {
            var type = e.layerType;
            var layer = e.layer;
                    console.trace('---------------------------')
                    console.trace( e)

            // Add the drawn/edited layer to the feature group
            drawnItems.addLayer(layer);
        
            // Save the updated drawn items data to localStorage
            
        if (type === 'circle') {
               // If the drawn shape is a circle, prompt the user for the radius
               var radius = prompt('لطفا شعاع دایره را وارد نمایید ( به متر ):');
               if (radius !== null) {
                   layer.setRadius(parseFloat(radius));
               } else {
                   // If the user cancels the prompt, remove the layer
                   drawnItems.removeLayer(layer);
                   return;
               }
           }
            // var drawnItemsData = drawnItems.toGeoJSON();

           // console.trace( JSON.stringify(drawnItemsData))
           // localStorage.setItem('drawnItemsData', JSON.stringify(drawnItemsData));
        });
        
    }

    function getLocation() {
       // showDefault();

        showDefault();

        if (navigator && navigator.geolocation) {
            
            navigator.geolocation.getCurrentPosition(showPosition);
        }

    }

    function showPosition(position) {
        console.warn("success position.coords.longitude", position.coords.longitude);
        console.warn("success position.coords.latitude", position.coords.latitude);

        mymap = L.map('mapid').setView([position.coords.latitude, position.coords.longitude], 13);

        var latlng = new L.LatLng(position.coords.latitude, position.coords.longitude);
        var marker = L.marker(latlng).addTo(mymap);
        init();

       /* if (existData && existData.data && existData.data.features && existData.data.features.length > 0) {
            debugger;
            data = existData.data;
            area = existData.area;
            updateAreaHelp(data);
            draw.add(data);
        }*/
    }


    var data;
    var area;

    function updateArea(e) {

    }

    function updateAreaHelp(data) {

    }


    function mysubmit() {

        var id = $("#id").val();
        var name = $("#name").val();
        var arr = [];
        drawnItems.getLayers().forEach(function(e) {
            console.trace(e);
            //arr.push(e.getLatLngs());
        });

         let drawnItemsData = drawnItems.toGeoJSON();
         let _data=JSON.stringify(drawnItemsData)
         //_data=btoa(_data);
        var body = { WorkplaceId: id, MapData: _data, Name: name };



        debugger;
        $.ajax({
            type: "POST",
            //url: '',
            data: JSON.parse(JSON.stringify(body)),
            success: function (e) {
                console.info(e);

                alert("با موفقیت ذخیره شد");
            },
            dataType: 'json',
            error: function(e) {
                console.error(e);
                alert("در ثبت خطایی رخ داد");
            }
        });


    }

    var existData;
    @{

        var gps = ViewData["gps"] as WorkplaceGps;

        if (gps != null)
        {
            <text>
                existData = '@Html.Raw(gps.MapData)';
            </text>
        }
    }





function findMe() {
    
  function onLocationFound(e) {
      var radius = Math.round(e.accuracy);
  
      L.marker(e.latlng).addTo(mymap)
          .bindPopup("شما در " + radius + " متری این نقطه هستید").openPopup();
  
     let circle= L.circle(e.latlng, radius).addTo(mymap);
      
     
     var newZoomLevel = 23;
     
     mymap.setView(e.latlng, newZoomLevel);
     
      setTimeout(()=>{
           mymap.removeLayer(circle);
      },5000);
  }

  mymap.locate({setView: true, maxZoom: 16})
  .on('locationfound', onLocationFound)
          .on('locationerror', function(e){
              console.log(e);
              alert("دسترسی به لوکیشن داده نشد");
          });
}


    getLocation();


</script>